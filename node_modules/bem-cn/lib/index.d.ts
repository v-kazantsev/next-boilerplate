export declare const ERROR_BLOCK_NAME_TYPE = "Block name should be a string";
export declare const ERROR_BLOCK_NAME_EMPTY = "Block name should be non-empty";
export interface BemSettings {
    ns?: string;
    el: string;
    mod: string;
    modValue: string;
    classMap?: Record<string, string>;
}
export interface BemMods {
    [mod: string]: string | boolean | any;
}
export declare type BemMix = string | string[] | BemBlock | {
    toString: () => string;
} | undefined;
export declare type BemItem = {
    is(state: BemState): BemItem & string;
    has(state: BemState): BemItem & string;
    state(state: BemState): BemItem & string;
    split(separator?: string, limit?: number): BemItem & string;
    mix(...mix: BemMix[]): BemItem & string;
    toString(): string;
};
interface BemBlock {
    (settings: BemSettings, context: BemContext, ...elemNameOrMods: (string | BemMods)[]): BemItem | string;
}
export declare type BemStatePrefix = 'is-' | 'has-';
export declare type BemState = Record<string, boolean>;
export declare type BemStates = Record<BemStatePrefix, BemState>;
interface BemContext {
    name: string;
    mods: BemMods;
    mixes: BemMix[];
    states: BemStates;
}
export interface IBlock extends BemItem {
    (...elemNameOrMods: (string | BemMods)[]): BemItem & string;
}
export declare type Block = IBlock & string;
export interface BemCn {
    (blockName: string): Block;
}
export declare const setup: (settings?: Partial<BemSettings>) => BemCn;
export declare const block: BemCn;
export default block;
